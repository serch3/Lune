import { useState } from 'react';
import ReactDOM from 'react-dom';
import { useLinksStore }   from '@/stores/links';
import { useAlertStore }   from '@/stores/alert';
import { useSettingsStore } from '@/stores/settings';
import { useModal } from '@/hooks/useModal';
import { GROUPS, COLORS } from '@/constants';

export function AddBookmark() {
  const store          = useLinksStore();
  const alertStore     = useAlertStore();
  const settingsStore  = useSettingsStore();
  const { isModalOpen, openModal, closeModal } = useModal();

  const [name, setName]   = useState('');
  const [url, setUrl]     = useState('');
  const [group, setGroup] = useState('');
  const [color, setColor] = useState('');

  // const disableEdit = () => {
  //   settingsStore.setEdit(false);
  // };

  const addLink = () => {
    if (store.links.find(l => l.name === name)) {
      alertStore.setAlert('A link with the same name already exists', 'error');
      return;
    }
    // Validate URL format
    if (!url.startsWith('http://') && !url.startsWith('https://')) {
      alertStore.setAlert('URL must start with http:// or https://', 'error');
      return;
    }
    // Validate Name and URL are not empty
    if (!name.trim() || !url.trim()) {
      alertStore.setAlert('Name and URL cannot be empty', 'error');
      return;
    }

    store.addLink({
      // id is auto-generated by the store
      name,
      url,
      group: group || 'Other',
      color
    });
    
    // Clear form fields after adding a link
    setName('');
    setUrl('');
    setGroup('');
    setColor('');
    alertStore.setAlert('Bookmark added successfully!', 'success');
    closeModal();
  };

  const handleOpenModal = () => {
    settingsStore.setEdit(false);
    openModal();
  };

  const modalContent = (
    <>
      {/* Floating "+" button to open modal */}
      <button
        onClick={handleOpenModal}
        aria-label="Add new bookmark"
        className="btn btn-circle fixed bottom-8 left-8 z-100 shadow-xl hover:scale-105 active:scale-95"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="currentColor" className="text-white">
            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
        </svg>
      </button>

      {isModalOpen && (
        <div className="modal modal-open modal-bottom sm:modal-middle" role="dialog" aria-modal="true" aria-labelledby="add-bookmark-title">
          <div className="modal-box backdrop-blur-lg shadow-2xl max-w-lg w-full flex flex-col rounded-t-2xl sm:rounded-2xl">
            {/* Header */}
            <div className="px-5 sm:px-7 py-4 sm:py-5 border-b border-neutral-700/50 flex justify-between items-center">
              <h3 id="add-bookmark-title" className="font-semibold text-xl text-white">Add New Bookmark</h3>
              <button onClick={closeModal} aria-label="Close add bookmark modal" className="btn btn-sm btn-circle btn-ghost text-gray-500 dark:text-gray-400 hover:text-black dark:hover:text-white">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2.5">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            {/* Body */}
            <div className="p-5 sm:p-7 space-y-5 overflow-y-auto grow">
              <div>
                <label htmlFor="bookmark-name-add" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1.5">Name</label>
                <input
                  type="text"
                  id="bookmark-name-add"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  placeholder="e.g. Google"
                  className="input input-bordered w-full max-w-xs"
                />
              </div>
              <div>
                <label htmlFor="bookmark-url-add" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1.5">URL</label>
                <input
                  type="url"
                  id="bookmark-url-add"
                  value={url}
                  onChange={(e) => setUrl(e.target.value)}
                  placeholder="e.g. https://google.com"
                  className="input input-bordered w-full max-w-xs"
                />
              </div>
              <div>
                <label htmlFor="bookmark-group-add" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1.5">Group (Optional)</label>
                <select
                  id="bookmark-group-add"
                  value={group}
                  onChange={(e) => setGroup(e.target.value)}
                  className="select select-bordered w-full"
                >
                  <option value="">Select a group (or type a new one)</option>
                  {GROUPS.map(g => <option key={g} value={g}>{g}</option>)}
                </select>
                 <input
                  type="text"
                  value={group}
                  onChange={(e) => setGroup(e.target.value)}
                  placeholder="Or type a new group name"
                  className="input input-bordered w-full p-3 mt-2"
                />
              </div>
              <div>
                <label htmlFor="bookmark-color-add" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1.5">Color (Optional)</label>
                <div className="grid grid-cols-5 sm:grid-cols-7 gap-2">
                  {COLORS.map(c => (
                    <button
                      key={c.name}
                      type="button"
                      title={c.name}
                      onClick={() => setColor(c.color)}
                      className={`w-full h-10 rounded-lg border-2 ${color === c.color ? 'ring-2 ring-offset-2 ring-offset-gray-800 dark:ring-offset-neutral-800 ring-blue-500 border-blue-400' : 'border-gray-300 dark:border-neutral-600/80'}`}
                      style={{ backgroundColor: c.color }}
                    />
                  ))}
                  {color && (
                    <button
                      type="button"
                      onClick={() => setColor('')}
                      className="w-full h-10 rounded-lg border-2 border-gray-300 dark:border-neutral-600/80 flex items-center justify-center text-xs text-gray-500 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-neutral-700/50"
                    >
                      Clear
                    </button>
                  )}
                </div>
              </div>
            </div>

            {/* Footer / Actions */}
            <div className="modal-action">
              <button onClick={closeModal} className="btn">
                Cancel
              </button>
              <button
                onClick={addLink}
                className="btn btn-primary"
              >
                Add Bookmark
              </button>
            </div>
          </div>
          {/* Click outside to close */}
          <form method="dialog" className="modal-backdrop">
            <button onClick={closeModal}>close</button>
          </form>
        </div>
      )}
    </>
  );

  return ReactDOM.createPortal(modalContent, document.body);
}

export default AddBookmark;
